{"version":3,"sources":["Components/Header.tsx","Pages/Profile.tsx","Redux/slice.ts","Components/Auth.tsx","Pages/Main.tsx","Redux/store.ts","App.tsx","index.tsx"],"names":["useStyles","makeStyles","paper","margin","padding","width","textAlign","Header","classes","login","useSelector","state","loginValid","Paper","className","Typography","variant","color","Button","component","Link","to","Profile","validationSlice","createSlice","name","initialState","password","reducers","action","payload","passwordValid","actions","useState","log","setLog","pass","setPass","dispatch","useDispatch","Stack","TextField","required","id","label","onChange","e","currentTarget","value","type","disabled","onClick","sx","my","Auth","store","configureStore","reducer","loginValidReducer","passwordValidReducer","App","basename","path","exact","Main","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPASMA,EAAYC,YAAW,CACzBC,MAAO,CACHC,OAAQ,WACRC,QAAS,MACTC,MAAO,OACPC,UAAW,YAoBJC,EAjBI,WACf,IAAMC,EAAUR,IACVS,EAAQC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAWH,SACjE,OACI,mCACA,eAACI,EAAA,EAAD,CAAOC,UAAWN,EAAQN,MAA1B,UACI,eAACa,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,oBACYR,KAEZ,cAACS,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,IAAIL,QAAQ,WAAxC,qCCjBGM,EANK,WAChB,OACI,cAAC,EAAD,K,kCCHKC,EAAkBC,YAAY,CACvCC,KAAM,aACNC,aAAc,CAACjB,MAAO,GAAIkB,SAAU,IACpCC,SAAU,CACNhB,WAAY,SAACD,EAAOkB,GAChBlB,EAAMF,MAAQoB,EAAOC,SAEzBC,cAAe,SAACpB,EAAOkB,GACnBlB,EAAMgB,SAAWE,EAAOC,YAK7B,EAAsCP,EAAgBS,QAA9CpB,EAAR,EAAQA,WAAYmB,EAApB,EAAoBA,cAEZR,IAAf,QCPMvB,EAAYC,YAAW,CACzBC,MAAO,CACHC,OAAQ,WACRC,QAAS,MACTC,MAAO,UAiDAE,EA7CI,WAEf,MAAsB0B,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAYMC,EAAWC,cACX/B,EAAUR,IACd,OACE,mCACI,cAACa,EAAA,EAAD,CAAOC,UAAWN,EAAQN,MAA1B,SACI,eAACsC,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CACIC,UAAQ,EACRC,GAAG,QACHC,MAAM,QACNzC,OAAO,QACP0C,SAtBU,SAACC,GACvBX,EAAOW,EAAEC,cAAcC,UAuBf,cAACP,EAAA,EAAD,CACIC,UAAQ,EACRC,GAAG,OACHC,MAAM,WACNK,KAAK,WACLJ,SA1BS,SAACC,GACtBT,EAAQS,EAAEC,cAAcC,QA0BZ7C,OAAO,UAEP,cAACe,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,YAAY6B,SAAkB,gBAARhB,GAAkC,WAATE,EAAkCe,QAzBzG,WAChBb,EAASP,EAAcK,IACvBE,EAAS1B,EAAWsB,KAuB2HkB,GAAI,CAACC,GAAI,OAAQrC,QAAQ,YAA5J,4BC7CLM,EANK,WAChB,OACI,cAACgC,EAAD,K,QCDKC,EAAQC,YAAe,CAChCC,QAAS,CACL7C,WAAY8C,EACZ3B,cAAe4B,KCiBRC,MAjBf,WACE,OACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAeM,SAAS,WAAxB,SACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SACE,cAACC,EAAD,MAEF,cAAC,IAAD,CAAOF,KAAK,YAAZ,SACE,cAAC,EAAD,cCXVG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7ab23780.chunk.js","sourcesContent":["import {FC} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { RootState } from '../Redux/store'\r\nimport { useSelector } from 'react-redux'\r\nimport Typography from '@mui/material/Typography'\r\nimport Paper from '@mui/material/Paper'\r\nimport Button from '@mui/material/Button'\r\nimport { makeStyles } from '@mui/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        margin: '1em auto',\r\n        padding: '1em',\r\n        width: '50vw',\r\n        textAlign: 'center'\r\n    },\r\n})\r\nconst Header: FC = () => {\r\n    const classes = useStyles();\r\n    const login = useSelector((state: RootState) => state.loginValid.login)\r\n    return (\r\n        <>\r\n        <Paper className={classes.paper} >\r\n            <Typography variant=\"h1\" color=\"initial\">\r\n                Login: {login}\r\n            </Typography>\r\n            <Button component={Link} to=\"/\" variant=\"outlined\">\r\n                Back to main page\r\n            </Button>\r\n        </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header","import {FC} from 'react'\r\nimport Header from '../Components/Header'\r\n\r\nconst Profile: FC = () => {\r\n    return (\r\n        <Header/>\r\n    )\r\n}\r\n\r\nexport default Profile","import {createSlice} from '@reduxjs/toolkit'\r\n\r\nexport const validationSlice = createSlice({\r\n    name: 'validation',\r\n    initialState: {login: '', password: ''},\r\n    reducers: {\r\n        loginValid: (state, action) => {\r\n            state.login = action.payload\r\n        },\r\n        passwordValid: (state, action) => { \r\n            state.password = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const { loginValid, passwordValid } = validationSlice.actions\r\n\r\nexport default validationSlice.reducer","import React, { FC, useState } from 'react'\r\nimport { makeStyles } from '@mui/styles';\r\nimport {Link} from 'react-router-dom'\r\nimport TextField from '@mui/material/TextField';\r\nimport Stack from '@mui/material/Stack'\r\nimport Paper from '@mui/material/Paper'\r\nimport Button from '@mui/material/Button'\r\nimport { useDispatch } from 'react-redux'\r\nimport { loginValid, passwordValid } from '../Redux/slice'\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        margin: '1em auto',\r\n        padding: '1em',\r\n        width: '20em'\r\n    },\r\n})\r\n\r\nconst Header: FC = () => {\r\n    \r\n    const [log, setLog] = useState('')\r\n    const [pass, setPass] = useState('')\r\n    const handleChangeLogin = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLog(e.currentTarget.value)        \r\n    }\r\n    const handleChangePass = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPass(e.currentTarget.value)        \r\n    }\r\n    \r\n    const handleClick = () => {\r\n        dispatch(passwordValid(pass))\r\n        dispatch(loginValid(log))\r\n    }\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles();\r\n      return (\r\n        <>\r\n            <Paper className={classes.paper}>\r\n                <Stack>\r\n                <TextField\r\n                    required\r\n                    id=\"login\"\r\n                    label=\"Login\"\r\n                    margin=\"dense\"\r\n                    onChange={handleChangeLogin}\r\n                    />\r\n                <TextField\r\n                    required\r\n                    id=\"pass\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    onChange={handleChangePass}\r\n                    margin=\"dense\"\r\n                    />\r\n                    <Button component={Link} to=\"/profile/\" disabled={log === 'developer21' && pass === '123456' ? false : true} onClick={handleClick} sx={{my: '1em'}} variant=\"contained\">\r\n                    Submit\r\n                </Button>\r\n                </Stack>\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header","import { FC } from 'react'\r\nimport Auth from '../Components/Auth'\r\n\r\nconst Profile: FC = () => {\r\n    return (\r\n        <Auth />\r\n    )\r\n}\r\n\r\nexport default Profile","import {configureStore} from '@reduxjs/toolkit'\r\nimport loginValidReducer from './slice'\r\nimport passwordValidReducer from './slice'\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        loginValid: loginValidReducer,\r\n        passwordValid: passwordValidReducer\r\n    }\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type RootState = ReturnType<typeof store.getState>","import React from 'react';\nimport Profile from './Pages/Profile'\nimport Main from './Pages/Main'\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport { store } from './Redux/store'\nimport { Provider } from 'react-redux'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename=\"/ustask/\">\n      <Switch>\n        <Route path=\"/\" exact>\n          <Main/>\n        </Route>\n        <Route path=\"/profile/\">\n          <Profile/>\n        </Route>\n      </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}